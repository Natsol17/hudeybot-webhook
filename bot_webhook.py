import os
from dotenv import load_dotenv
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import asyncio  # –¥–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

flask_app = Flask(__name__)
bot = Bot(token=TOKEN)

application = ApplicationBuilder().token(TOKEN).build()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# echo
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!")

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

# Webhook –º–∞—Ä—à—Ä—É—Ç
@flask_app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), bot)
        asyncio.create_task(application.process_update(update))  # ‚Üê –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
        return "ok"
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ webhook:", e)
        return "error", 500

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Webhook (Flask + Telegram)")
    flask_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))



